//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由Codesmith工具生成。
// 此文件的更改可能会导致不正确的行为，如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using ProtoBuf;
using ZyGames.Framework.Common;
using ZyGames.Framework.Collection;
using ZyGames.Framework.Game.Service;
using ZyGames.Framework.Model;
using ZyGames.Framework.Game.Context;

namespace ZyGames.Moshouxingkong.Model
{
    /// <summary>
    /// 玩家信息[:BaseUser]
    /// </summary>
    /// <![CDATA[
    /// @periodTime:设置生存周期(秒)
    /// @personalName: 映射UserId对应的字段名,默认为"UserId"
    /// ]]>
    /// </remarks>
    [Serializable, ProtoContract]
    [EntityTable(DbConfig.Data, "GameUser", DbConfig.PeriodTime, DbConfig.PersonalName)]
    public class GameUser : BaseUser
    {

        /// <summary>
        /// </summary>
        public GameUser()
            : base(AccessLevel.ReadWrite)
        {
            
        }
        /// <summary>
        /// </summary>
        public GameUser(int userid)
            : this()
        {
            _userId = userid;
        }

        #region 自动生成属性
        private int _userId;
        /// <summary>
        /// UserId作为主键
        /// </summary>        
        [ProtoMember(1)]
        [EntityField("UserId", IsKey = true)]
        public int UserId
        {
            get
            {
                return _userId;
            }
            private set
            {
                SetChange("UserId", value);
            }
        }
        
        private string _username;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(2)]
        [EntityField("UserName")]
        public string UserName
        {
            get
            {
                return _username;
            }
            set
            {
                SetChange("UserName", value);
            }
        }
        private string _usertype;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(3)]
        [EntityField("UserType")]
        public string UserType
        {
            get
            {
                return _usertype;
            }
            set
            {
                SetChange("UserType", value);
            }
        }
        private string _clientos;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(4)]
        [EntityField("ClientOS")]
        public string ClientOS
        {
            get
            {
                return _clientos;
            }
            set
            {
                SetChange("ClientOS", value);
            }
        }
        private string _clientversion;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(5)]
        [EntityField("ClientVersion")]
        public string ClientVersion
        {
            get
            {
                return _clientversion;
            }
            set
            {
                SetChange("ClientVersion", value);
            }
        }
        private string _clientarchive;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(6)]
        [EntityField("ClientArchive")]
        public string ClientArchive
        {
            get
            {
                return _clientarchive;
            }
            set
            {
                SetChange("ClientArchive", value);
            }
        }
        private string _usermagic;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(7)]
        [EntityField("UserMagic")]
        public string UserMagic
        {
            get
            {
                return _usermagic;
            }
            set
            {
                SetChange("UserMagic", value);
            }
        }
        private int _archivetimes;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(8)]
        [EntityField("ArchiveTimes")]
        public int ArchiveTimes
        {
            get
            {
                return _archivetimes;
            }
            set
            {
                SetChange("ArchiveTimes", value);
            }
        }

        private DateTime _birthday;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(9)]
        [EntityField("UserBirthday")]
        public DateTime UserBirthday
        {
            get
            {
                return _birthday;
            }
            set
            {
                SetChange("UserBirthday", value);
            }
        }

        protected override object this[string index]
        {
            get
            {
                #region
                switch (index)
                {
                    case "UserId": return _userId;
                    case "UserName": return _username;
                    case "UserType": return _usertype;
                    case "ClientOS": return _clientos;
                    case "ClientVersion": return _clientversion;
                    case "ClientArchive": return _archivetimes;
                    case "UserMagic": return _usermagic;
                    case "ArchiveTimes": return _archivetimes;
                    case "UserBirthday": return _birthday;
                    default: throw new ArgumentException(string.Format("GameUser index[{0}] isn't exist.", index));
                }
                #endregion
            }
            set
            {
                #region
                switch (index)
                {
                    case "UserId":
                        _userId = value.ToInt();
                        break;
                    case "UserName":
                        _username = value.ToNotNullString();
                        break;
                    case "UserType":
                        _usertype = value.ToNotNullString();
                        break;
                    case "ClientOS":
                        _clientos = value.ToNotNullString();
                        break;
                    case "ClientVersion":
                        _clientversion = value.ToNotNullString();
                        break;
                    case "ClientArchive":
                        _clientarchive = value.ToNotNullString();
                        break;
                    case "UserMagic":
                        _usermagic = value.ToNotNullString();
                        break;
                    case "ArchiveTimes":
                        _archivetimes = value.ToInt();
                        break;
                    case "UserBirthday":
                        _birthday = value.ToDateTime();
                        break;
                    default: throw new ArgumentException(string.Format("GameUser index[{0}] isn't exist.", index));
                }
                #endregion
            }
        }

        #endregion

        protected override int GetIdentityId()
        {
            //设置玩家的UserID
            //若要做为全局使用设置类绑定的自定义属性[EntityTable(CacheType.Entity, DbConfig.Config, @TableName, @PeriodTime)]
            return UserId;
        }

        /// <summary>
        /// 玩家会话ID
        /// </summary>
        [ProtoMember(100)]
        public string SessionID { get; set; }


        public override string GetNickName()
        {
            return "moshouxingkong";
        }

        public override string GetPassportId()
        {
            return "moshouxingkong";
        }

        public override string GetRetailId()
        {
            return "moshouxingkong";
        }

        public override int GetUserId()
        {
            return _userId;
        }

        public override bool IsFengJinStatus
        {
            get { return false; }
        }

        public override DateTime OnlineDate
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            {
                throw new NotImplementedException();
            }
        }
    }
}